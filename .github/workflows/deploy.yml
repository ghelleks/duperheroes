name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      generate_images:
        description: 'Generate missing hero images'
        required: false
        default: true
        type: boolean
      batch_size:
        description: 'Number of images to generate in batch'
        required: false
        default: '2'
        type: string

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  fetch-heroes:
    runs-on: ubuntu-latest
    outputs:
      heroes-updated: ${{ steps.check-changes.outputs.heroes-updated }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Fetch heroes from Google Doc
        run: npm run fetch-heroes
        env:
          NODE_ENV: production
      
      - name: Check for hero data changes
        id: check-changes
        run: |
          if git diff --quiet public/heroes.json; then
            echo "heroes-updated=false" >> $GITHUB_OUTPUT
            echo "No changes to heroes.json"
          else
            echo "heroes-updated=true" >> $GITHUB_OUTPUT
            echo "Heroes data has been updated"
          fi
      
      - name: Commit updated hero data
        if: steps.check-changes.outputs.heroes-updated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add public/heroes.json
          git add public/debug/
          git commit -m "🤖 Update hero data from Google Doc

          Fetched latest hero data and updated heroes.json database.
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push origin main

  audit-images:
    needs: fetch-heroes
    runs-on: ubuntu-latest
    outputs:
      missing-images: ${{ steps.audit.outputs.missing-images }}
      audit-results: ${{ steps.audit.outputs.audit-results }}
      duplicates-found: ${{ steps.audit.outputs.duplicates-found }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main  # Get latest after potential hero data commit
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Audit hero images
        id: audit
        run: |
          npm run audit-images
          # Extract missing images count from audit output
          if [ -f "public/debug/image-audit.json" ]; then
            missing_count=$(jq '.summary.missing_images' public/debug/image-audit.json)
            echo "missing-images=${missing_count}" >> $GITHUB_OUTPUT
            echo "Found ${missing_count} missing images"
            
            # Check for duplicate images that violate JPEG preference rule
            duplicate_count=$(jq '.stats.duplicateImages // 0' public/debug/image-audit.json)
            echo "duplicates-found=${duplicate_count}" >> $GITHUB_OUTPUT
            echo "Found ${duplicate_count} duplicate image sets"
            
            # Store audit results as artifact
            echo "audit-results=public/debug/image-audit.json" >> $GITHUB_OUTPUT
          else
            echo "missing-images=0" >> $GITHUB_OUTPUT
            echo "duplicates-found=0" >> $GITHUB_OUTPUT
            echo "No audit results file found"
          fi
      
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: image-audit-results
          path: public/debug/image-audit.json
          retention-days: 7

  cleanup-duplicates:
    needs: audit-images
    if: ${{ needs.audit-images.outputs.duplicates-found != '0' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Run JPEG preference cleanup
        run: |
          echo "🧹 Running JPEG preference cleanup script..."
          node scripts/cleanup-image-duplicates.js
      
      - name: Commit cleanup changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add public/images/
          if git diff --cached --quiet; then
            echo "No duplicate files to remove"
          else
            echo "Committing duplicate file cleanup"
            git commit -m "🧹 Clean up duplicate images per JPEG preference rule
            
            Implements ADR-011: JPEG File Preference Rule
            - Removed PNG duplicates when JPEG exists
            - Cleaned up naming inconsistencies
            - Optimized storage and loading performance
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push origin main
          fi

  generate-images:
    needs: [audit-images, cleanup-duplicates]
    if: ${{ needs.audit-images.outputs.missing-images != '0' && (github.event.inputs.generate_images != 'false' || github.event_name == 'push') && github.ref == 'refs/heads/main' && always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main  # Get latest after potential hero data commit
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Download audit results
        uses: actions/download-artifact@v4
        with:
          name: image-audit-results
          path: public/debug/
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Generate missing hero images
        run: |
          cd hero-image-generator
          npm install
          node src/image-generator.js --batch-size=${{ github.event.inputs.batch_size || '2' }}
        env:
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
          VERTEX_AI_REGION: us-central1
          VERTEX_AI_MODEL: imagen-3.0-generate-002
          REQUIRED_GCLOUD_ACCOUNT: ${{ secrets.REQUIRED_GCLOUD_ACCOUNT }}
          OUTPUT_DIRECTORY: /home/runner/work/duperheroes/duperheroes/public/images
          DEBUG_OUTPUT: /home/runner/work/duperheroes/duperheroes/public/debug/image-generation.json
          BATCH_SIZE: ${{ github.event.inputs.batch_size || '2' }}
          RATE_LIMIT_DELAY: 5000
          MAX_RETRIES: 3
          DRY_RUN: false
          VERBOSE_LOGGING: true
      
      - name: Commit generated images
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add public/images/
          git add public/debug/
          if git diff --cached --quiet; then
            echo "No new images or debug files generated"
          else
            echo "Committing newly generated images and debug output"
            git commit -m "🤖 Generate missing hero images via GitHub Actions

            Generated images for heroes without existing images using Vertex AI.
            Generated ${{ needs.audit-images.outputs.missing-images }} missing images.
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push origin main
          fi

  process-images:
    needs: [fetch-heroes, audit-images, cleanup-duplicates, generate-images]
    # Run after image generation to create responsive formats
    if: always() && (needs.fetch-heroes.result == 'success' && needs.audit-images.result == 'success' && (needs.cleanup-duplicates.result == 'success' || needs.cleanup-duplicates.result == 'skipped') && (needs.generate-images.result == 'success' || needs.generate-images.result == 'skipped'))
    runs-on: ubuntu-latest
    outputs:
      images-processed: ${{ steps.check-processing.outputs.images-processed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main  # Get latest including any new images
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install
      
      - name: Check if image processing needed
        id: check-processing
        run: |
          # Check if there are any new images that don't have responsive variants
          echo "Checking for images that need processing..."
          
          # Count original images
          original_count=$(find public/images -maxdepth 1 -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" | wc -l)
          
          # Count thumbnail variants (should match original count)
          thumbnail_count=0
          if [ -d "public/images/thumbnail" ]; then
            thumbnail_count=$(find public/images/thumbnail -name "*.jpg" | wc -l)
          fi
          
          echo "Original images: ${original_count}"
          echo "Thumbnail variants: ${thumbnail_count}"
          
          if [ "${original_count}" -gt "${thumbnail_count}" ]; then
            echo "images-processed=true" >> $GITHUB_OUTPUT
            echo "Processing needed: ${original_count} original vs ${thumbnail_count} thumbnails"
          else
            echo "images-processed=false" >> $GITHUB_OUTPUT
            echo "No processing needed - all images have variants"
          fi
      
      - name: Generate responsive images (JPEG preferred)
        if: steps.check-processing.outputs.images-processed == 'true'
        run: |
          echo "🖼️  Generating responsive image variants with JPEG preference..."
          npm run images:responsive
          echo "📋 Processing JPEG files first, falling back to PNG only if needed"
      
      - name: Convert to WebP format
        if: steps.check-processing.outputs.images-processed == 'true'
        run: |
          echo "🌐 Converting images to WebP format..."
          npm run images:webp
          echo "✅ WebP conversion complete - optimal format for web delivery"
      
      - name: Commit processed images
        if: steps.check-processing.outputs.images-processed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git add public/images/thumbnail/
          git add public/images/medium/
          git add public/images/large/
          if git diff --cached --quiet; then
            echo "No new processed images to commit"
          else
            echo "Committing processed responsive images and WebP variants"
            git commit -m "🤖 Generate responsive image formats via GitHub Actions

            Automatically generated thumbnail, medium, and large variants plus WebP conversions
            for any new images added to the repository. This ensures optimal performance
            across all devices and browsers.
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push origin main
          fi

  deploy:
    needs: [fetch-heroes, audit-images, cleanup-duplicates, generate-images, process-images]
    # Always deploy after all previous jobs complete
    if: always() && (needs.fetch-heroes.result == 'success' && needs.audit-images.result == 'success' && (needs.cleanup-duplicates.result == 'success' || needs.cleanup-duplicates.result == 'skipped') && (needs.generate-images.result == 'success' || needs.generate-images.result == 'skipped') && (needs.process-images.result == 'success' || needs.process-images.result == 'skipped'))
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main  # Get latest including any commits from previous jobs
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './public'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
